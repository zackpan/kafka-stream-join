/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.abn.demo.stream.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AccountTranslation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3510108427414234035L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountTranslation\",\"namespace\":\"com.abn.demo.stream.model\",\"fields\":[{\"name\":\"account\",\"type\":\"string\",\"avro.java.string\":\"String\"},{\"name\":\"raw_account\",\"type\":\"string\",\"avro.java.string\":\"String\"},{\"name\":\"source\",\"type\":\"string\",\"avro.java.string\":\"String\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AccountTranslation> ENCODER =
      new BinaryMessageEncoder<AccountTranslation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AccountTranslation> DECODER =
      new BinaryMessageDecoder<AccountTranslation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AccountTranslation> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AccountTranslation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AccountTranslation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AccountTranslation>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AccountTranslation to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AccountTranslation from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AccountTranslation instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AccountTranslation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence account;
  private java.lang.CharSequence raw_account;
  private java.lang.CharSequence source;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AccountTranslation() {}

  /**
   * All-args constructor.
   * @param account The new value for account
   * @param raw_account The new value for raw_account
   * @param source The new value for source
   */
  public AccountTranslation(java.lang.CharSequence account, java.lang.CharSequence raw_account, java.lang.CharSequence source) {
    this.account = account;
    this.raw_account = raw_account;
    this.source = source;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return account;
    case 1: return raw_account;
    case 2: return source;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: account = (java.lang.CharSequence)value$; break;
    case 1: raw_account = (java.lang.CharSequence)value$; break;
    case 2: source = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'account' field.
   * @return The value of the 'account' field.
   */
  public java.lang.CharSequence getAccount() {
    return account;
  }


  /**
   * Sets the value of the 'account' field.
   * @param value the value to set.
   */
  public void setAccount(java.lang.CharSequence value) {
    this.account = value;
  }

  /**
   * Gets the value of the 'raw_account' field.
   * @return The value of the 'raw_account' field.
   */
  public java.lang.CharSequence getRawAccount() {
    return raw_account;
  }


  /**
   * Sets the value of the 'raw_account' field.
   * @param value the value to set.
   */
  public void setRawAccount(java.lang.CharSequence value) {
    this.raw_account = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.CharSequence getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Creates a new AccountTranslation RecordBuilder.
   * @return A new AccountTranslation RecordBuilder
   */
  public static com.abn.demo.stream.model.AccountTranslation.Builder newBuilder() {
    return new com.abn.demo.stream.model.AccountTranslation.Builder();
  }

  /**
   * Creates a new AccountTranslation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AccountTranslation RecordBuilder
   */
  public static com.abn.demo.stream.model.AccountTranslation.Builder newBuilder(com.abn.demo.stream.model.AccountTranslation.Builder other) {
    if (other == null) {
      return new com.abn.demo.stream.model.AccountTranslation.Builder();
    } else {
      return new com.abn.demo.stream.model.AccountTranslation.Builder(other);
    }
  }

  /**
   * Creates a new AccountTranslation RecordBuilder by copying an existing AccountTranslation instance.
   * @param other The existing instance to copy.
   * @return A new AccountTranslation RecordBuilder
   */
  public static com.abn.demo.stream.model.AccountTranslation.Builder newBuilder(com.abn.demo.stream.model.AccountTranslation other) {
    if (other == null) {
      return new com.abn.demo.stream.model.AccountTranslation.Builder();
    } else {
      return new com.abn.demo.stream.model.AccountTranslation.Builder(other);
    }
  }

  /**
   * RecordBuilder for AccountTranslation instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountTranslation>
    implements org.apache.avro.data.RecordBuilder<AccountTranslation> {

    private java.lang.CharSequence account;
    private java.lang.CharSequence raw_account;
    private java.lang.CharSequence source;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.abn.demo.stream.model.AccountTranslation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.account)) {
        this.account = data().deepCopy(fields()[0].schema(), other.account);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.raw_account)) {
        this.raw_account = data().deepCopy(fields()[1].schema(), other.raw_account);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.source)) {
        this.source = data().deepCopy(fields()[2].schema(), other.source);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing AccountTranslation instance
     * @param other The existing instance to copy.
     */
    private Builder(com.abn.demo.stream.model.AccountTranslation other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.account)) {
        this.account = data().deepCopy(fields()[0].schema(), other.account);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.raw_account)) {
        this.raw_account = data().deepCopy(fields()[1].schema(), other.raw_account);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.source)) {
        this.source = data().deepCopy(fields()[2].schema(), other.source);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'account' field.
      * @return The value.
      */
    public java.lang.CharSequence getAccount() {
      return account;
    }


    /**
      * Sets the value of the 'account' field.
      * @param value The value of 'account'.
      * @return This builder.
      */
    public com.abn.demo.stream.model.AccountTranslation.Builder setAccount(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.account = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'account' field has been set.
      * @return True if the 'account' field has been set, false otherwise.
      */
    public boolean hasAccount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'account' field.
      * @return This builder.
      */
    public com.abn.demo.stream.model.AccountTranslation.Builder clearAccount() {
      account = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'raw_account' field.
      * @return The value.
      */
    public java.lang.CharSequence getRawAccount() {
      return raw_account;
    }


    /**
      * Sets the value of the 'raw_account' field.
      * @param value The value of 'raw_account'.
      * @return This builder.
      */
    public com.abn.demo.stream.model.AccountTranslation.Builder setRawAccount(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.raw_account = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'raw_account' field has been set.
      * @return True if the 'raw_account' field has been set, false otherwise.
      */
    public boolean hasRawAccount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'raw_account' field.
      * @return This builder.
      */
    public com.abn.demo.stream.model.AccountTranslation.Builder clearRawAccount() {
      raw_account = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.CharSequence getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.abn.demo.stream.model.AccountTranslation.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.source = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public com.abn.demo.stream.model.AccountTranslation.Builder clearSource() {
      source = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AccountTranslation build() {
      try {
        AccountTranslation record = new AccountTranslation();
        record.account = fieldSetFlags()[0] ? this.account : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.raw_account = fieldSetFlags()[1] ? this.raw_account : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.source = fieldSetFlags()[2] ? this.source : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AccountTranslation>
    WRITER$ = (org.apache.avro.io.DatumWriter<AccountTranslation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AccountTranslation>
    READER$ = (org.apache.avro.io.DatumReader<AccountTranslation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.account);

    out.writeString(this.raw_account);

    out.writeString(this.source);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.account = in.readString(this.account instanceof Utf8 ? (Utf8)this.account : null);

      this.raw_account = in.readString(this.raw_account instanceof Utf8 ? (Utf8)this.raw_account : null);

      this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.account = in.readString(this.account instanceof Utf8 ? (Utf8)this.account : null);
          break;

        case 1:
          this.raw_account = in.readString(this.raw_account instanceof Utf8 ? (Utf8)this.raw_account : null);
          break;

        case 2:
          this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










